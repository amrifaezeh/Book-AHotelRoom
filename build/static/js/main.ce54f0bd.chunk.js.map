{"version":3,"sources":["components/ToggleButton.js","components/RoomType.js","App.js","serviceWorker.js","index.js"],"names":["ToggleButton","children","className","onToggle","toggleClassName","defaultState","toggle","buttonClass","text","useReducer","preState","dispatchData","newState","class","button","dispatchButton","onClick","data","RoomType","roomType","roomsInfo","bookingCallBack","roomTypeLabel","map","_","style","backgroundColor","bedTypeLabel","boardCodeDescription","totalPrice","App","props","roomInfo","TestData","reduce","a","b","push","roomTypes","Object","keys","console","log","useState","rt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ukqBAgCeA,EA9BM,SAAC,GAAwE,IAAtEC,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,SAAgD,IAAtCC,uBAAsC,MAApB,cAAoB,EAEzFD,EAAUA,GADD,aAET,IACME,EAAe,CAAEC,QAAQ,EAAOC,YADX,cAC4CC,KAAMP,GAJY,EAKxDQ,qBAAW,SAACC,EAAUC,GAEnD,GAAKD,EAASJ,OAYV,OADAH,EAASE,EAAaC,QACfD,EAVP,IAAMO,EAAW,CACbN,QAAQ,EACRC,YAAaH,EACbI,KAAO,kCAAQE,EAASF,KAAjB,IAAuB,uBAAGK,MAAM,0BAG3C,OADAV,EAASS,EAASN,QACXM,GAMZP,GArBsF,mBAKlFS,EALkF,KAK1EC,EAL0E,KAuBzF,OACI,4BAAQF,MAAK,cAASC,EAAOP,YAAhB,YAA+BL,GACxCc,QAAS,kBAAMD,EAAe,CAAEE,KAAM,SACxCH,EAAON,OCiEFU,EA1FE,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,SAAUC,EAAiC,EAAjCA,UAAiC,EAAtBC,gBAiErC,OA/DAD,EAAWA,GAAY,CAAC,CACpB,GAAO,uCACP,SAAa,SACb,KAAS,wBACT,YAAgB,wBAChB,WAAe,OACf,MAAU,OACV,WAAe,EACf,SAAa,EACb,cAAkB,EAClB,UAAc,OACd,qBAAyB,gBACzB,QAAY,UACZ,iBAAoB,EACpB,gBAAmB,EACnB,WAAe,GACf,OAAW,KACX,cAAkB,GAClB,WAAe,KACf,aAAiB,KACjB,qBAAyB,sBACzB,kBAAsB,CACpB,CACE,SAAa,sBACb,OAAW,sBACX,OAAW,GAEb,CACE,SAAa,sBACb,OAAW,sBACX,OAAW,OAEb,CACE,SAAa,sBACb,OAAW,sBACX,OAAW,SAGf,cAAiB,EACjB,WAAe,CACb,CACE,IAAQ,kBACR,MAAU,qCAGd,gBAAoB,CAClB,SAEF,aAAiB,CACf,UAEF,cAAkB,CAChB,oBAEF,UAAc,CACZ,iBAEF,WAAc,EACd,UAAa,IAGfD,EAAUA,GAAWC,EAAU,GAAGE,cAIhC,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,SACViB,GAEL,yBAAKjB,UAAU,SACVkB,EAAUG,IAAI,SAACC,GAAD,OACX,yBAAKtB,UAAU,OACX,yBAAKA,UAAU,QAAQuB,MAAO,CAAEC,gBAAiB,QAC5CF,EAAEG,aADP,IACsBH,EAAEI,sBAExB,yBAAK1B,UAAU,uCAAuCuB,MAAO,CAAEC,gBAAiB,UAC3EF,EAAEK,WACH,kBAAC,EAAD,CAAc3B,UAAU,UAAxB,e,OChDb4B,MA5Bf,WAUE,IAPuBC,EAOjBC,GAPiBD,EAOU,gBAAVE,EANTC,OAAO,SAACC,EAAGC,GAEpB,OADCD,EAAEC,EAAEL,IAAUI,EAAEC,EAAEL,KAAW,IAAIM,KAAKD,GAChCD,GACP,KAICG,EAAWC,OAAOC,KAAKR,GAC7BS,QAAQC,IAAIV,GAZC,MAcmBW,mBAAS,IAd5B,mBAmBb,OAnBa,UAoBX,6BACE,yBAAKzC,UAAU,aACdoC,EAAUf,IAAI,SAAAqB,GAAE,OAAG,kBAAC,EAAD,CAAUzB,SAAUyB,EAAIxB,UAAWY,EAASY,UChBlDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ce54f0bd.chunk.js","sourcesContent":["import React, { useState, useReducer } from \"react\";\r\n\r\nconst ToggleButton = ({ children, className, onToggle, toggleClassName = \"btn-warning\" }) => {\r\n    const f= ()=>{};\r\n    onToggle= onToggle || f;\r\n    const defaultButtonClass = \"btn-primary\";\r\n    const defaultState = { toggle: false, buttonClass: defaultButtonClass, text: children };\r\n    const [button, dispatchButton] = useReducer((preState, dispatchData) => {\r\n\r\n        if (!preState.toggle) {\r\n\r\n            const newState = {\r\n                toggle: true,\r\n                buttonClass: toggleClassName,\r\n                text: (<span> {preState.text} <i class=\"fas fa-times-circle\"></i></span>)\r\n            }\r\n            onToggle(newState.toggle);\r\n            return newState;\r\n\r\n        } else {\r\n            onToggle(defaultState.toggle);\r\n            return defaultState;\r\n        }\r\n    }, defaultState);\r\n\r\n    return (\r\n        <button class={`btn ${button.buttonClass} ${className}`}\r\n            onClick={() => dispatchButton({ data: \"hi\" })}\r\n        >{button.text}</button>\r\n    )\r\n}\r\n\r\nexport default ToggleButton;","import React from \"react\";\r\nimport ToggleButton from \"./ToggleButton\";\r\n\r\nconst RoomType = ({ roomType, roomsInfo, bookingCallBack }) => {\r\n\r\n    roomsInfo= roomsInfo ||[{\r\n        \"id\" : \"57034fac-c335-4b61-9ab8-b4ea3d4b9e97\",\r\n        \"groupKey\" : \"Double\",\r\n        \"name\" : \"Double Room - Economy\",\r\n        \"description\" : \"Double Room - Economy\",\r\n        \"totalPrice\" : 224.47,\r\n        \"price\" : 224.47,\r\n        \"promoPrice\" : 0,\r\n        \"b2CPrice\" : 0,\r\n        \"savingPercent\" : 0,\r\n        \"boardCode\" : \"1360\",\r\n        \"boardCodeDescription\" : \"All Inclusive\",\r\n        \"hotelId\" : \"FR37525\",\r\n        \"isNonRefundable\" : false,\r\n        \"canHoldBooking\" : true,\r\n        \"facilities\" : {},\r\n        \"images\" : null,\r\n        \"specialOffers\" : [],\r\n        \"surcharges\" : null,\r\n        \"nightlyRates\" : null,\r\n        \"cancelFreeBeforeDate\" : \"2018-09-07T23:59:00\",\r\n        \"roomCancelCharges\" : [\r\n          {\r\n            \"DateFrom\" : \"2018-08-29T09:51:00\",\r\n            \"DateTo\" : \"2018-09-08T23:59:00\",\r\n            \"Amount\" : 0\r\n          },\r\n          {\r\n            \"DateFrom\" : \"2018-09-08T23:59:00\",\r\n            \"DateTo\" : \"2018-09-15T23:59:00\",\r\n            \"Amount\" : 66.68\r\n          },\r\n          {\r\n            \"DateFrom\" : \"2018-09-15T23:59:00\",\r\n            \"DateTo\" : \"2018-09-16T23:59:00\",\r\n            \"Amount\" : 111.13\r\n          }\r\n        ],\r\n        \"hasBreakfast\" : false,\r\n        \"debugInfos\" : [\r\n          {\r\n            \"Key\" : \"SearchRequestId\",\r\n            \"Value\" : \"789e264573734ebdb44c3b0d454980e1\"\r\n          }\r\n        ],\r\n        \"accommodateText\" : [\r\n          \"Hotel\"\r\n        ],\r\n        \"bedTypeLabel\" : [\r\n          \"Double\"\r\n        ],\r\n        \"roomTypeLabel\" : [\r\n          \"run of the house\"\r\n        ],\r\n        \"viewLabel\" : [\r\n          \"not specified\"\r\n        ],\r\n        \"isVisible\" : true,\r\n        \"selected\" : false\r\n      }];\r\n\r\n      roomType= roomType|| roomsInfo[0].roomTypeLabel;\r\n\r\n    return (\r\n\r\n        <div className=\"row\">\r\n            <div className=\"col-3\">\r\n                {roomType}\r\n            </div>\r\n            <div className=\"col-9\">\r\n                {roomsInfo.map((_) =>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-9\" style={{ backgroundColor: \"red\" }}>\r\n                            {_.bedTypeLabel}-{_.boardCodeDescription}\r\n                    </div>\r\n                        <div className=\"col-3 d-flex justify-content-between\" style={{ backgroundColor: \"green\" }}>\r\n                            {_.totalPrice}\r\n                            <ToggleButton className=\"btn-sm\">Book</ToggleButton>\r\n                    </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default RoomType;","import React,{useState} from 'react';\nimport RoomType from \"./components/RoomType\";\n//because i plan to have this hosted on github page, so i won't use axios\nimport TestData from \"./test-data/test\";\n\n\nfunction App() {\n\n\n  function groupBy(list, props) {\n    return list.reduce((a, b) => {\n       (a[b[props]] = a[b[props]] || []).push(b);\n       return a;\n    }, {});\n  }\n\n  const roomInfo=groupBy(TestData, 'roomTypeLabel');\n  const roomTypes= Object.keys(roomInfo);\n  console.log(roomInfo);\n\n  const [bookedHotel, bookAHotel]=useState([]);\n  \n  \n  \n\n  return (\n    <div>\n      <div className=\"container\">\n      {roomTypes.map(rt=> <RoomType roomType={rt} roomsInfo={roomInfo[rt]} />)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}